 #include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <termios.h>
#include <unistd.h>
#define MAX_GRID_SIZE 20
#define MAX_WORD_LENGTH 50
#define MAX_THEME_COUNT 5
typedef struct { char letter;
int selected; int found;
int direction; int correct;
} Cell;
typedef struct { char name[20];
int count;
char words[100][MAX_WORD_LENGTH]; } Theme;
void affichemenu(int *choix, Theme themes[], int *selectedThemeIndex);
void choixtheme(Theme *themes, int themeCount, int *selectedThemeIndex);
void jouer(Theme selectedTheme, int taillegrille, Theme themes[], int *selectedThemeIndex);
void initialisetab(Cell grid[][MAX_GRID_SIZE], int taillegrille);
int canPlaceWord(Cell grid[][MAX_GRID_SIZE], int taillegrille, char *word, int row, int col, int direction); void casesvides(Cell grid[][MAX_GRID_SIZE], int taillegrille);
void placeWords(Cell grid[][MAX_GRID_SIZE], int taillegrille, char wordList[][MAX_WORD_LENGTH], int wordCount);


 void affichetab(Cell grid[][MAX_GRID_SIZE], int selected[MAX_GRID_SIZE][MAX_GRID_SIZE], int cursor_x, int cursor_y, int select_x, int select_y, int selecting , int taillegrille);
void displayWordList(char wordList[][MAX_WORD_LENGTH], int wordCount, int wordFound[]);
int checkWordInTheme(char* word, Theme theme);
void markCorrect(Cell grid[][MAX_GRID_SIZE], int select_x, int select_y, int cursor_x, int cursor_y);
void selectLetter(Cell grid[][MAX_GRID_SIZE], int x, int y);
int allWordsFound(int wordFound[], int wordCount);
void afficherRouge(char c);
void afficherVert(char c);
int getch(void);
int main() {
// Exemple de thèmes et de listes de mots
int taillegrille_defaut = 20; // Valeur par défaut de
la taille de la grille
int taillegrille = 20;
int choix;
int selectedThemeIndex = -1; // -1 indique qu'aucun
thème n'a été sélectionné
    Theme themes[MAX_THEME_COUNT];
    Theme theme1;
    strcpy(theme1.name, "Animaux");
    theme1.count = 4;
    strcpy(theme1.words[0], "lion");
    strcpy(theme1.words[1], "tigre");
    strcpy(theme1.words[2], "elephant");
    strcpy(theme1.words[3], "girafe");
    Theme theme2;
    strcpy(theme2.name, "Fruits");
    theme2.count = 3;
    strcpy(theme2.words[0], "pomme");
    strcpy(theme2.words[1], "banane");


     strcpy(theme2.words[2], "orange");
    Theme theme3;
    strcpy(theme3.name, "Pays");
    theme3.count = 4;
    strcpy(theme3.words[0], "france");
    strcpy(theme3.words[1], "allemagne");
    strcpy(theme3.words[2], "espagne");
    strcpy(theme3.words[3], "italie");
    Theme theme4;
    strcpy(theme4.name, "Couleurs");
    theme4.count = 3;
    strcpy(theme4.words[0], "rouge");
    strcpy(theme4.words[1], "bleu");
    strcpy(theme4.words[2], "vert");
    Theme theme5;
    strcpy(theme5.name, "Villes");
    theme5.count = 3;
    strcpy(theme5.words[0], "paris");
    strcpy(theme5.words[1], "berlin");
    strcpy(theme5.words[2], "madrid");
    themes[0] = theme1;
    themes[1] = theme2;
    themes[2] = theme3;
    themes[3] = theme4;
    themes[4] = theme5;
while (1) {
affichemenu(&choix, themes, &selectedThemeIndex); switch (choix) {
case 1:
if(selectedThemeIndex == -1) {
srand((unsigned int)time(NULL)); // Initialise le générateur de nombres aléatoires
                    selectedThemeIndex = rand() %
MAX_THEME_COUNT; // Choisis un index au hasard
}
                taillegrille = taillegrille_defaut; //
Réinitialise la taille de la grille à sa valeur par défaut


                 jouer(themes[selectedThemeIndex] ,
taillegrille, themes, &selectedThemeIndex);
break; case 2:
                choixtheme(themes, MAX_THEME_COUNT,
&selectedThemeIndex);
                jouer(themes[selectedThemeIndex],
taillegrille, themes, &selectedThemeIndex);
break; case 3:
                printf("Choisissez la taille de la grille
(entre 5 et 20) : ");
scanf("%d", &taillegrille);
if (taillegrille < 5 || taillegrille > 20)
{
                    printf("Taille invalide. La taille doit
être comprise entre 5 et 20.\n");
                    taillegrille = taillegrille_defaut; //
Réinitialise à la valeur par défaut
}else { jouer(themes[selectedThemeIndex],
taillegrille, themes, &selectedThemeIndex);
                }
break; case 4:
                printf("Veuillez entrer le nombre de mots :
");
&themes[selectedThemeIndex].count);
                printf("Veuillez entrer les mots un par un
:\n");
for (int i = 0; i < themes[selectedThemeIndex].count; i++) {
                    printf("Mot %d : ", i + 1);
                    scanf("%s",
themes[selectedThemeIndex].words[i]);
}
break; case 5:
} }
scanf("%d",
return 0;


 }
void affichemenu(int *choix, Theme themes[], int *selectedThemeIndex) {
    printf("\n--- Menu ---\n");
    printf("1. Jouer\n");
    printf("2. Choisir un thème\n");
    printf("3. Choisir la taille de la grille\n");
    printf("4. Ajouter une nouvelle liste de mots\n");
    printf("5. Quitter le jeu\n");
    scanf("%d", choix);
}
// choisir le thème ( menu case 2)
void choixtheme(Theme *themes, int themeCount, int *selectedThemeIndex) {
printf("Choisissez un thème :\n");
for (int i = 0; i < themeCount; i++) {
        printf("%d. %s\n", i + 1, themes[i].name);
    }
int choix;
scanf("%d", &choix);
if (choix >= 1 && choix <= themeCount) {
*selectedThemeIndex = choix - 1; } else {
        printf("Choix invalide. Veuillez sélectionner un
thème valide.\n");
} }
void jouer(Theme selectedTheme, int taillegrille, Theme themes[], int *selectedThemeIndex) {
char message[50] = ""; // Variable pour stocker le message à afficher
int selected[MAX_GRID_SIZE][MAX_GRID_SIZE] = {0}; int cursor_x = 0;
int cursor_y = 0;
int select_x = 0;
int select_y = 0;
int selecting = 0; // Indicateur pour savoir si nous sommes en train de sélectionner des cellules


 char words[MAX_WORD_LENGTH][MAX_GRID_SIZE * MAX_GRID_SIZE + 1] = {0}; // Tableau pour stocker les mots extraits de la grille
int word_count = 0; // Compteur pour garder une trace du nombre de mots extraits
char c;
int wordFound[selectedTheme.count]; // Tableau pour suivre les mots trouvés dans le thème sélectionné
for (int i = 0; i < selectedTheme.count; i++) { wordFound[i] = 0; // Initialiser tous les mots à
non trouvés
}
Cell grid[MAX_GRID_SIZE][MAX_GRID_SIZE]; initialisetab(grid, taillegrille);
placeWords(grid, taillegrille, selectedTheme.words,
selectedTheme.count); casesvides(grid, taillegrille); while (1) {
printf("\033[H\033[J"); // Clear screen équivalent
        //  Afficher les mots extraits pour vérification
printf("Mots extraits :\n");
for (int i = 0; i < word_count; i++) {
            printf("Mot %d : %s\n", i + 1, words[i]);
        }
        affichetab(grid, selected, cursor_x, cursor_y,
select_x, select_y, selecting, taillegrille);
        displayWordList(selectedTheme.words,
selectedTheme.count, wordFound);
for (int i = 0; i < word_count; i++) { printf("\nMot %d: %s", i + 1, words[i]);
}
        // Affichez le message après avoir effacé l'écran
if (strlen(message) > 0) {
printf("%s\n", message);
strcpy(message, ""); // Effacer le message
après l'avoir affiché
}


         printf("\nDéplacez-vous avec 8 (haut), 4 (gauche),
2 (bas), 6 (droite). Commencez et finissez la sélection
avec espace. Quittez avec Q.\n");
c = getch(); switch (c) {
case '2': // bas
if (cursor_y < MAX_GRID_SIZE - 1)
break;
case '8': // haut
if (cursor_y > 0) cursor_y--;
break;
case '6': // droite
if (cursor_x < MAX_GRID_SIZE - 1)
break;
case '4': // gauche
if (cursor_x > 0) cursor_x--;
break; case 'Q': case 'q':
printf("\nRetour au menu.\n");
return; // Retourne au menu principal // Si l'utilisateur appuie sur espace,
commence ou termine la sélection
case ' ':
if (!selecting) {
                    select_x = cursor_x;
                    select_y = cursor_y;
                    selecting = 0;
                    grid[select_y][select_x].selected = 1;
// Marquez la lettre comme sélectionnée
} else {
// La logique pour gérer la fin de la
sélection, l'extraction du mot, la vérification si le mot fait partie du thème sélectionné,
                    // et la mise à jour de la grille et de
la liste des mots est ici.
cursor_y++;
cursor_x++;
même case
== select_y) {
// Si le curseur est toujours sur la
if (cursor_x == select_x && cursor_y 7

 selecting = 0; grid[select_y][select_x].selected = 0; // Marquez la
lettre
comme désélectionnée
}
break;
letter_str, 1);
= 1;
char letter_str[2] = strncat(words[word_count], grid[select_y][j].selected
}
} else {
for (int j = select_x; j >=
cursor_x; j--) {
{grid[select_y][j].letter, '\0'};
letter_str, 1);
= 1;
char letter_str[2] = strncat(words[word_count], grid[select_y][j].selected
} }
} else if (select_x == cursor_x) { if (select_y <= cursor_y) {
for (int i = select_y; i <=
cursor_y; i++) {
{grid[i][select_x].letter, '\0'};
letter_str, 1);
= 1;
char letter_str[2] = strncat(words[word_count], grid[i][select_x].selected
}
} else {
if (select_y == cursor_y) {
if (select_x <= cursor_x) {
for (int j = select_x; j <=
cursor_x; j++) {
{grid[select_y][j].letter, '\0'};


 for (int i = select_y; i >=
cursor_y; i--) {
{grid[i][select_x].letter, '\0'};
letter_str, 1);
= 1;
} }
}
affichetab(grid, selected, cursor_x, cursor_y, select_x, select_y, selecting, taillegrille);
words[word_count]);
selectedTheme)) {
printf("Mot sélectionné : %s\n",
if (checkWordInTheme(words[word_count],
                        strcpy(message, "\nMot
correct!\n"); // Mettre le message à afficher dans la
variable
                        markCorrect(grid, select_x,
select_y, cursor_x, cursor_y);
for (int i = 0; i < selectedTheme.count; i++) {
if (strcmp(words[word_count], selectedTheme.words[i]) == 0) {
Marquez le mot comme trouvé
selectedTheme.count)) {
char letter_str[2] = strncat(words[word_count], grid[i][select_x].selected
wordFound[i] = 1; // break;
} }
if (allWordsFound(wordFound,
                                printf("\nFélicitations,
tous les mots ont été trouvés! Retour au menu.\n");
return; // Retour au menu }
selecting = 0; 9

 words[word_count][strlen(words[word_count])] = '\0'; word_count++;
} else {
strcpy(message, "\nMot
incorrect!\n"); // Mettre le message à afficher dans la
variable
                        // Le mot ne fait pas partie de la
liste, réinitialiser la sélection
                        selecting = 0;
                        select_x = 0;
                        select_y = 0;
                        cursor_x = 0;
                        cursor_y = 0;
                        strcpy(words[word_count], "");
} }
break; }
} }
// procédure pour enregistrer les réponses correctes
void markCorrect(Cell grid[][MAX_GRID_SIZE], int select_x, int select_y, int cursor_x, int cursor_y) {
if (select_y == cursor_y) {
if (select_x <= cursor_x) {
for (int j = select_x; j <= cursor_x; j++) { grid[select_y][j].correct = 1;
}
} else {
for (int j = select_x; j >= cursor_x; j--) { grid[select_y][j].correct = 1;
} }
} else if (select_x == cursor_x) { if (select_y <= cursor_y) {
for (int i = select_y; i <= cursor_y; i++) { grid[i][select_x].correct = 1;
}
} else {
for (int i = select_y; i >= cursor_y; i--) { 10

                 grid[i][select_x].correct = 1;
            }
} }
}
// initialiser le tableau
void initialisetab(Cell grid[][MAX_GRID_SIZE], int taillegrille) {
int row, col;
for (row = 0; row < taillegrille; row++) {
for (col = 0; col < taillegrille; col++) { grid[row][col].letter = ' '; grid[row][col].selected = 0; grid[row][col].found = 0; grid[row][col].direction = -1; grid[row][col].correct = 0; // cette ligne pour
réinitialiser l'attribut correct
} }
}
int canPlaceWord(Cell grid[][MAX_GRID_SIZE], int taillegrille, char *word, int row, int col, int direction) {
size_t length = strlen(word);
for (int i = 0; i < length; i++) {
int r = 0, c = 0; switch (direction) {
case 0:
r = row;
c = col + i;
break; // droite case 1:
r = row + i; c = col; break; // bas
case 2:
r = row;
c = col - i; break; // gauche


 if (r < taillegrille) {
}
case 3:
r = row - i;
c = col; break; // haut
0 || c < 0 || r >= taillegrille || c >= return 0; // Hors limites
}
if (grid[r][c].letter != ' ' && grid[r][c].letter != word[i]) {
return 0; // Cellule non libre }
}
return 1; }
void placeWords(Cell grid[][MAX_GRID_SIZE], int taillegrille, char wordList[][MAX_WORD_LENGTH], int wordCount) {
srand((unsigned int)time(NULL));
for (int i = 0; i < wordCount; i++) {
int length = (int)strlen(wordList[i]); if (length > taillegrille) {
continue; // Ignorer les mots trop longs }
int placed = 0; while (!placed) {
int direction = rand() % 4; // Direction aléatoire : 0=droite, 1=bas, 2=gauche, 3=haut
int row = rand() % taillegrille;
int col = rand() % taillegrille;
if (canPlaceWord(grid, taillegrille,
wordList[i], row, col, direction)) {
for (int j = 0; j < length; j++) {
wordList[i][j];
switch (direction) { case 0:
grid[row][col + j].letter = break; // droite
case 1: 

 wordList[i][j];
wordList[i][j];
wordList[i][j];
} }
placed = 1;
couleur rouge
select_x) ||
    grid[row + j][col].letter =
break; // bas case 2:
    grid[row][col - j].letter =
break; // gauche case 3:
grid[row - j][col].letter = break; // haut
                grid[row][col].direction = direction; //
Enregistrer la direction dans la cellule de départ
} }
} }
void affichetab(Cell grid[][MAX_GRID_SIZE], int selected[MAX_GRID_SIZE][MAX_GRID_SIZE], int cursor_x, int cursor_y, int select_x, int select_y, int selecting , int taillegrille) {
for (int i = 0; i < taillegrille; i++) {
for (int j = 0; j < taillegrille; j++) {
verte
if (grid[i][j].correct) { afficherVert(grid[i][j].letter); // couleur
} else if (selected[i][j]) { afficherRouge(grid[i][j].letter); //
} else if (i == cursor_y && j == cursor_x) { printf("[%c] ", grid[i][j].letter);
} else if (selecting && ((i == select_y && j ==
                                     (i == cursor_y && ((j
>= select_x && j <= cursor_x) || (j <= select_x && j >=
cursor_x))) ||


                                      (j == cursor_x && ((i
>= select_y && i <= cursor_y) || (i <= select_y && i >=
cursor_y))))) {
grid[i][j].letter); // Rouge
printf("\033[31m %c \033[0m ", } else {
                           // Affichage en bleu et jaune
pour toutes les autres cases
if ((i + j) % 2 == 0) { printf("\033[43m %c \033[0m
", grid[i][j].letter); // Jaune
} else {
                   printf("\n");
               }
", grid[i][j].letter); // Bleu
                       }
}
    printf("\033[44m %c \033[0m
}
}
void casesvides(Cell grid[][MAX_GRID_SIZE], int taillegrille) {
int row, col;
for (row = 0; row < taillegrille; row++) {
for (col = 0; col < taillegrille; col++) { if (grid[row][col].letter == ' ') {
                grid[row][col].letter = 'A' + rand() % 26;
// Remplir les cases vides avec des lettres aléatoires
} }
} }
// procédure pour afficher les mots à trouver ( ça dépend du thème)
void displayWordList(char wordList[][MAX_WORD_LENGTH], int wordCount, int wordFound[]) {
    printf("\n+------------------+\n");
    printf("| Mots à trouver : |\n");
    printf("+------------------+\n");
for (int i = 0; i < wordCount; i++) { 14

 if (!wordFound[i]) { // Si le mot n'a pas été trouvé
            printf("%s\n", wordList[i]);
        }
} }
// fonction équivalente à getch() pour MAC
int getch(void) {
struct termios oldattr, newattr;
int ch;
tcgetattr(STDIN_FILENO, &oldattr);
newattr = oldattr;
newattr.c_lflag &= ~(ICANON | ECHO); tcsetattr(STDIN_FILENO, TCSANOW, &newattr); ch = getchar();
tcsetattr(STDIN_FILENO, TCSANOW, &oldattr); return ch;
}
// fonction qui détérmine si tout les mots ont été trouvé (fin du jeu)
int allWordsFound(int wordFound[], int wordCount) {
for (int i = 0; i < wordCount; i++) {
if (!wordFound[i]) { // Si un mot n'a pas été
trouvé
}
return 1; // Si tous les mots ont été trouvés }
// fonction qui vérifie si le mot séléctionné appartient à la liste des mots du thème ou pas
int checkWordInTheme(char* word, Theme theme) {
for (int i = 0; i < theme.count; i++) {
if (strcmp(word, theme.words[i]) == 0) {
return 1; }
}
return 0; }
return 0; }


         // pour les couleurs
void afficherRouge(char c) { printf("\033[31m%c\033[0m", c);
}
void afficherVert(char c) {
printf("\033[0;32m"); // Séquence d'échappement ANSI pour le texte vert
    printf("%c  ", c);
printf("\033[0m"); // Réinitialise la couleur du texte à la normale
}

